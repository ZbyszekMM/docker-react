sudo: required
language: generic # prevent travis think it is Ruby project 
services:
- docker

before_install:

# image dostał nazwę zm/docker-react, tylko travis proces będzie znać tn tag
- docker build -t zm/docker-react -f Dockerfile.dev . 



# tutaj wszystkie komendy niezbędne do wykonania testów. Travis będzie sprawdzał rezultat każdej z tych komend
# Jako ostatnie parameter docker run jest polecenie, które będzie wykonane w kontenerze po uruchomieniu jego
# w tym przypadku jest to npm run test .  -- --coverage to komenda, która 
script:
#  - docker run zm/docker-react npm run test -- --coverage    # to mi zadziałało, chociaż kurs mówi, że je nie powinno
  - docker run -e CI=true zm/docker-react npm run test

deploy:
  edge: true # fix na jakiś błąd - video
  provider: elasticbeanstalk
  region: "us-east-1"
  app: "DockerCourse-3FrontEnd" # nazwa aplikacji zgodnie z tym co jest w Elastic Beanstalk (EBS)
  env: "Dockercourse3frontend-env" # nazwa pierwszego środowiska w EBS
  bucket_name: "elasticbeanstalk-us-east-1-392634375159" # nazwa bucketu, do którego uploadowany jest kod. #
                                                            # JEDEN bucket dla wszystkich projektów EBS per REGION
                                                            # Bucket tworzony jet automatycznie, poszukaj go w S3, ma w nazwie region
  bucket_path: "DockerCourse-3FrontEnd"   # pełna "ścieżka" do zipa z plikiem aplikacji. 
  skip_cleanup: true # dodałem za dokumentacją travis by uniknąć problemu "no stash entries found" podczas deployowania do EBS
  on:
    branch: master # trigger deployment TYLKO jeśli zostanie skomitowana zmiana w master branch kodu
  access_key_id: $AWS_ACCESS_KEY     # te są skonfigurowane w environment secrets w Travis. 
  secret_access_key: $AWS_SECRET_KEY
#    secure: $AWS_SECRET_KEY # wartość przechowywana w d:/zbyszek/devopsdev/AWS keys